name: Build Applications

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build-windows:
    runs-on: windows-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.10'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pyinstaller pillow windnd
    
    - name: Build Windows exe
      run: |
        pyinstaller --onefile --windowed --name "ImageProcessor" filepath2json.py
    
    - name: Upload Windows artifact
      uses: actions/upload-artifact@v4
      with:
        name: Windows-exe
        path: dist/ImageProcessor.exe

  build-macos:
    runs-on: macos-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.10'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pyinstaller pillow
    
    - name: Create default icon
      run: |
        # 创建一个简单的 PNG 图标
        python -c "
        from PIL import Image, ImageDraw
        img = Image.new('RGB', (512, 512), color='white')
        draw = ImageDraw.Draw(img)
        draw.rectangle([50, 50, 462, 462], fill='blue')
        img.save('icon.png')
        "
        
        # 创建不同尺寸的图标
        mkdir icon.iconset
        for size in 16 32 64 128 256 512; do
          sips -z $size $size icon.png --out icon.iconset/icon_${size}x${size}.png
          sips -z $((size*2)) $((size*2)) icon.png --out icon.iconset/icon_${size}x${size}@2x.png
        done
        
        # 生成 icns 文件
        iconutil -c icns icon.iconset
    
    - name: Create Info.plist
      run: |
        echo '<?xml version="1.0" encoding="UTF-8"?>
        <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
        <plist version="1.0">
        <dict>
            <key>CFBundleDisplayName</key>
            <string>ImageProcessor</string>
            <key>CFBundleExecutable</key>
            <string>ImageProcessor</string>
            <key>CFBundleIconFile</key>
            <string>icon.icns</string>
            <key>CFBundleIdentifier</key>
            <string>com.example.imageprocessor</string>
            <key>CFBundleInfoDictionaryVersion</key>
            <string>6.0</string>
            <key>CFBundleName</key>
            <string>ImageProcessor</string>
            <key>CFBundlePackageType</key>
            <string>APPL</string>
            <key>CFBundleShortVersionString</key>
            <string>1.0.0</string>
            <key>LSMinimumSystemVersion</key>
            <string>10.13.0</string>
            <key>NSHighResolutionCapable</key>
            <true/>
        </dict>
        </plist>' > Info.plist
    
    - name: Build MacOS app
      run: |
        pyinstaller --onefile --windowed --name "ImageProcessor" --icon icon.icns filepath2json.py
    
    - name: Create app bundle
      run: |
        # 创建完整的 .app 结构
        mkdir -p "dist/ImageProcessor.app/Contents/"{MacOS,Resources}
        mv dist/ImageProcessor "dist/ImageProcessor.app/Contents/MacOS/"
        mv Info.plist "dist/ImageProcessor.app/Contents/"
        mv icon.icns "dist/ImageProcessor.app/Contents/Resources/"
        chmod +x "dist/ImageProcessor.app/Contents/MacOS/ImageProcessor"
    
    - name: Package app
      run: |
        cd dist
        # 使用 ditto 命令保留 macOS 特殊属性
        ditto -c -k --keepParent ImageProcessor.app ../ImageProcessor-mac.zip
    
    - name: Upload MacOS artifact
      uses: actions/upload-artifact@v4
      with:
        name: MacOS-app
        path: ImageProcessor-mac.zip

  create-release:
    needs: [build-windows, build-macos]
    runs-on: ubuntu-latest
    permissions:
      contents: write
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/download-artifact@v4
      with:
        name: Windows-exe
        path: release-files/windows
        
    - name: Download MacOS artifact
      uses: actions/download-artifact@v4
      with:
        name: MacOS-app
        path: release-files/macos
    
    - name: Create Release
      uses: ncipollo/release-action@v1
      with:
        tag: v${{ github.run_number }}
        name: Release v${{ github.run_number }}
        draft: false
        prerelease: false
        artifacts: |
          release-files/windows/ImageProcessor.exe
          release-files/macos/ImageProcessor-mac.zip
        token: ${{ secrets.GITHUB_TOKEN }}
